<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="405"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="405"> </text>
<g id="frames">
<g>
<title>all (103,329 samples, 100.00%)</title><rect x="10.0" y="371.0" width="1180.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="13.0" y="382.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (63,586 samples, 61.54%)</title><rect x="10.0" y="355.0" width="726.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="13.0" y="366.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (63,586 samples, 61.54%)</title><rect x="10.0" y="339.0" width="726.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.0" y="350.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (63,586 samples, 61.54%)</title><rect x="10.0" y="323.0" width="726.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="334.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (2,067 samples, 2.00%)</title><rect x="10.0" y="307.0" width="23.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="318.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (2,067 samples, 2.00%)</title><rect x="10.0" y="291.0" width="23.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="302.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (2,025 samples, 1.96%)</title><rect x="10.0" y="275.0" width="23.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="286.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (2,025 samples, 1.96%)</title><rect x="10.0" y="259.0" width="23.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="270.0">j..</text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (2,025 samples, 1.96%)</title><rect x="10.0" y="243.0" width="23.1" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="13.0" y="254.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (42 samples, 0.04%)</title><rect x="33.1" y="275.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="36.1" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (42 samples, 0.04%)</title><rect x="33.1" y="259.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="36.1" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (42 samples, 0.04%)</title><rect x="33.1" y="243.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="36.1" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (42 samples, 0.04%)</title><rect x="33.1" y="227.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="36.1" y="238.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (42 samples, 0.04%)</title><rect x="33.1" y="211.0" width="0.5" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="36.1" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/nik27090/ServiceImpl$$Lambda$73/534297806.run (61,519 samples, 59.54%)</title><rect x="33.6" y="307.0" width="702.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="36.6" y="318.0">ru/mail/polis/service/nik27090/ServiceImpl$$Lambda$73/534297806.run</text>
</g>
<g>
<title>ru/mail/polis/service/nik27090/ServiceImpl.lambda$requestHandler$1 (61,519 samples, 59.54%)</title><rect x="33.6" y="291.0" width="702.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="36.6" y="302.0">ru/mail/polis/service/nik27090/ServiceImpl.lambda$requestHandler$1</text>
</g>
<g>
<title>ru/mail/polis/service/nik27090/RendezvousTopology.parseAckFrom (1,794 samples, 1.74%)</title><rect x="33.6" y="275.0" width="20.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="36.6" y="286.0"></text>
</g>
<g>
<title>ru.mail.polis.service.nik27090.AckFrom (1,794 samples, 1.74%)</title><rect x="33.6" y="259.0" width="20.5" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="36.6" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/nik27090/ServiceImpl.putEntityExecutor (59,725 samples, 57.80%)</title><rect x="54.1" y="275.0" width="682.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="57.1" y="286.0">ru/mail/polis/service/nik27090/ServiceImpl.putEntityExecutor</text>
</g>
<g>
<title>java/lang/String.getBytes (1,393 samples, 1.35%)</title><rect x="54.1" y="259.0" width="15.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="57.1" y="270.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1,393 samples, 1.35%)</title><rect x="54.1" y="243.0" width="15.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="57.1" y="254.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1,393 samples, 1.35%)</title><rect x="54.1" y="227.0" width="15.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="57.1" y="238.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1,393 samples, 1.35%)</title><rect x="54.1" y="211.0" width="15.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="57.1" y="222.0"></text>
</g>
<g>
<title>byte[] (1,393 samples, 1.35%)</title><rect x="54.1" y="195.0" width="15.9" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="57.1" y="206.0"></text>
</g>
<g>
<title>java/util/Arrays.stream (75 samples, 0.07%)</title><rect x="70.0" y="259.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="73.0" y="270.0"></text>
</g>
<g>
<title>java/util/Arrays.stream (75 samples, 0.07%)</title><rect x="70.0" y="243.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="73.0" y="254.0"></text>
</g>
<g>
<title>java/util/Arrays.spliterator (34 samples, 0.03%)</title><rect x="70.0" y="227.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="73.0" y="238.0"></text>
</g>
<g>
<title>java/util/Spliterators.spliterator (34 samples, 0.03%)</title><rect x="70.0" y="211.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="73.0" y="222.0"></text>
</g>
<g>
<title>java.util.Spliterators$ArraySpliterator (34 samples, 0.03%)</title><rect x="70.0" y="195.0" width="0.4" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="73.0" y="206.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (41 samples, 0.04%)</title><rect x="70.4" y="227.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="73.4" y="238.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$Head (41 samples, 0.04%)</title><rect x="70.4" y="211.0" width="0.5" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="73.4" y="222.0"></text>
</g>
<g>
<title>java/util/Collection.stream (61 samples, 0.06%)</title><rect x="70.9" y="259.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="73.9" y="270.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (43 samples, 0.04%)</title><rect x="71.1" y="243.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="74.1" y="254.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$Head (43 samples, 0.04%)</title><rect x="71.1" y="227.0" width="0.5" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="74.1" y="238.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.toList (46 samples, 0.04%)</title><rect x="71.6" y="259.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="74.6" y="270.0"></text>
</g>
<g>
<title>java.util.stream.Collectors$CollectorImpl (46 samples, 0.04%)</title><rect x="71.6" y="243.0" width="0.5" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="74.6" y="254.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (203 samples, 0.20%)</title><rect x="72.1" y="259.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="75.1" y="270.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (203 samples, 0.20%)</title><rect x="72.1" y="243.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="75.1" y="254.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (203 samples, 0.20%)</title><rect x="72.1" y="227.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="75.1" y="238.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (158 samples, 0.15%)</title><rect x="72.1" y="211.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="75.1" y="222.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (146 samples, 0.14%)</title><rect x="72.1" y="195.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="75.1" y="206.0"></text>
</g>
<g>
<title>java/util/ArrayList$ArrayListSpliterator.forEachRemaining (56 samples, 0.05%)</title><rect x="72.1" y="179.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="75.1" y="190.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (56 samples, 0.05%)</title><rect x="72.1" y="163.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="75.1" y="174.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.accept (56 samples, 0.05%)</title><rect x="72.1" y="147.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="75.1" y="158.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$86/1156721799.accept (56 samples, 0.05%)</title><rect x="72.1" y="131.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="75.1" y="142.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (56 samples, 0.05%)</title><rect x="72.1" y="115.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="75.1" y="126.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (56 samples, 0.05%)</title><rect x="72.1" y="99.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="75.1" y="110.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (56 samples, 0.05%)</title><rect x="72.1" y="83.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="75.1" y="94.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (56 samples, 0.05%)</title><rect x="72.1" y="67.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="75.1" y="78.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (56 samples, 0.05%)</title><rect x="72.1" y="51.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="75.1" y="62.0"></text>
</g>
<g>
<title>java.lang.Object[] (56 samples, 0.05%)</title><rect x="72.1" y="35.0" width="0.6" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="75.1" y="46.0"></text>
</g>
<g>
<title>java/util/Spliterators$ArraySpliterator.forEachRemaining (38 samples, 0.04%)</title><rect x="72.7" y="179.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="75.7" y="190.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.accept (38 samples, 0.04%)</title><rect x="72.7" y="163.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="75.7" y="174.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$86/1156721799.accept (38 samples, 0.04%)</title><rect x="72.7" y="147.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="75.7" y="158.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (38 samples, 0.04%)</title><rect x="72.7" y="131.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="75.7" y="142.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (38 samples, 0.04%)</title><rect x="72.7" y="115.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="75.7" y="126.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (38 samples, 0.04%)</title><rect x="72.7" y="99.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="75.7" y="110.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (38 samples, 0.04%)</title><rect x="72.7" y="83.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="75.7" y="94.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (38 samples, 0.04%)</title><rect x="72.7" y="67.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="75.7" y="78.0"></text>
</g>
<g>
<title>java.lang.Object[] (38 samples, 0.04%)</title><rect x="72.7" y="51.0" width="0.5" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="75.7" y="62.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (32 samples, 0.03%)</title><rect x="73.2" y="179.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="76.2" y="190.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$79/437290203.get (32 samples, 0.03%)</title><rect x="73.2" y="163.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="76.2" y="174.0"></text>
</g>
<g>
<title>java.util.ArrayList (32 samples, 0.03%)</title><rect x="73.2" y="147.0" width="0.3" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="76.2" y="158.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (45 samples, 0.04%)</title><rect x="73.9" y="211.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="76.9" y="222.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (45 samples, 0.04%)</title><rect x="73.9" y="195.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="76.9" y="206.0"></text>
</g>
<g>
<title>java.util.stream.ReduceOps$3ReducingSink (45 samples, 0.04%)</title><rect x="73.9" y="179.0" width="0.5" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="76.9" y="190.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.filter (51 samples, 0.05%)</title><rect x="74.4" y="259.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="77.4" y="270.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$2 (51 samples, 0.05%)</title><rect x="74.4" y="243.0" width="0.6" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="77.4" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (73 samples, 0.07%)</title><rect x="75.2" y="259.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="78.2" y="270.0"></text>
</g>
<g>
<title>byte[] (30 samples, 0.03%)</title><rect x="75.2" y="243.0" width="0.3" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="78.2" y="254.0"></text>
</g>
<g>
<title>java.lang.String[] (23 samples, 0.02%)</title><rect x="75.5" y="243.0" width="0.3" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="78.5" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/nik27090/DaoHelper.putEntity (18,592 samples, 17.99%)</title><rect x="76.0" y="259.0" width="212.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="79.0" y="270.0">ru/mail/polis/service/nik270..</text>
</g>
<g>
<title>one.nio.http.Response (1,359 samples, 1.32%)</title><rect x="76.0" y="243.0" width="15.5" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="79.0" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (5,234 samples, 5.07%)</title><rect x="91.5" y="243.0" width="59.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="94.5" y="254.0">one/ni..</text>
</g>
<g>
<title>byte[] (2,207 samples, 2.14%)</title><rect x="91.5" y="227.0" width="25.3" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="94.5" y="238.0">b..</text>
</g>
<g>
<title>java.lang.String[] (1,721 samples, 1.67%)</title><rect x="116.8" y="227.0" width="19.6" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="119.8" y="238.0"></text>
</g>
<g>
<title>java.lang.String (1,306 samples, 1.26%)</title><rect x="136.4" y="227.0" width="14.9" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="139.4" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/nik27090/DAOImpl.upsert (11,999 samples, 11.61%)</title><rect x="151.3" y="243.0" width="137.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="154.3" y="254.0">ru/mail/polis/dao..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (5,288 samples, 5.12%)</title><rect x="151.3" y="227.0" width="60.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="154.3" y="238.0">java/n..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (5,288 samples, 5.12%)</title><rect x="151.3" y="211.0" width="60.4" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="154.3" y="222.0">java.n..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (151 samples, 0.15%)</title><rect x="211.7" y="227.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="214.7" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (151 samples, 0.15%)</title><rect x="211.7" y="211.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="214.7" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (151 samples, 0.15%)</title><rect x="211.7" y="195.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="214.7" y="206.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (139 samples, 0.13%)</title><rect x="211.7" y="179.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="214.7" y="190.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (139 samples, 0.13%)</title><rect x="211.7" y="163.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="214.7" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (73 samples, 0.07%)</title><rect x="211.7" y="147.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="214.7" y="158.0"></text>
</g>
<g>
<title>java.lang.ThreadLocal$ThreadLocalMap$Entry (73 samples, 0.07%)</title><rect x="211.7" y="131.0" width="0.8" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="214.7" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.initialValue (66 samples, 0.06%)</title><rect x="212.5" y="147.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="215.5" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.initialValue (66 samples, 0.06%)</title><rect x="212.5" y="131.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="215.5" y="142.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter (66 samples, 0.06%)</title><rect x="212.5" y="115.0" width="0.8" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="215.5" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/nik27090/MemTable.upsert (6,560 samples, 6.35%)</title><rect x="213.4" y="227.0" width="74.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="216.4" y="238.0">ru/mail/..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (5,225 samples, 5.06%)</title><rect x="213.4" y="211.0" width="59.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="216.4" y="222.0">java/n..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (5,225 samples, 5.06%)</title><rect x="213.4" y="195.0" width="59.7" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="216.4" y="206.0">java.n..</text>
</g>
<g>
<title>ru.mail.polis.dao.nik27090.Value (1,335 samples, 1.29%)</title><rect x="273.1" y="211.0" width="15.2" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="276.1" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/nik27090/HttpHelper.calculateResponse (102 samples, 0.10%)</title><rect x="288.3" y="259.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="291.3" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/nik27090/HttpHelper.sendResponse (102 samples, 0.10%)</title><rect x="288.3" y="243.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="291.3" y="254.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (102 samples, 0.10%)</title><rect x="288.3" y="227.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="291.3" y="238.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (102 samples, 0.10%)</title><rect x="288.3" y="211.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="291.3" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (67 samples, 0.06%)</title><rect x="288.3" y="195.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="291.3" y="206.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (67 samples, 0.06%)</title><rect x="288.3" y="179.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="291.3" y="190.0"></text>
</g>
<g>
<title>byte[] (67 samples, 0.06%)</title><rect x="288.3" y="163.0" width="0.8" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="291.3" y="174.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (35 samples, 0.03%)</title><rect x="289.1" y="195.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="292.1" y="206.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (35 samples, 0.03%)</title><rect x="289.1" y="179.0" width="0.4" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="292.1" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/nik27090/HttpHelper.sendResponse (7,024 samples, 6.80%)</title><rect x="289.5" y="259.0" width="80.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="292.5" y="270.0">ru/mail/p..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (7,024 samples, 6.80%)</title><rect x="289.5" y="243.0" width="80.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="292.5" y="254.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (7,024 samples, 6.80%)</title><rect x="289.5" y="227.0" width="80.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="292.5" y="238.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (4,861 samples, 4.70%)</title><rect x="289.5" y="211.0" width="55.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="292.5" y="222.0">one/n..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (4,861 samples, 4.70%)</title><rect x="289.5" y="195.0" width="55.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="292.5" y="206.0">one/n..</text>
</g>
<g>
<title>byte[] (4,861 samples, 4.70%)</title><rect x="289.5" y="179.0" width="55.5" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="292.5" y="190.0">byte[]</text>
</g>
<g>
<title>one/nio/net/Session.write (2,163 samples, 2.09%)</title><rect x="345.0" y="211.0" width="24.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="348.0" y="222.0">o..</text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (2,163 samples, 2.09%)</title><rect x="345.0" y="195.0" width="24.7" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="348.0" y="206.0">o..</text>
</g>
<g>
<title>ru/mail/polis/service/nik27090/RendezvousTopology.getReplicas (30 samples, 0.03%)</title><rect x="369.7" y="259.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="372.7" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/nik27090/RendezvousTopology.getReplicas (30 samples, 0.03%)</title><rect x="369.7" y="243.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="372.7" y="254.0"></text>
</g>
<g>
<title>java.lang.String[] (30 samples, 0.03%)</title><rect x="369.7" y="227.0" width="0.4" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="372.7" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/nik27090/RendezvousTopology.getResponseFromNodes (28,509 samples, 27.59%)</title><rect x="370.1" y="259.0" width="325.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="373.1" y="270.0">ru/mail/polis/service/nik27090/RendezvousTop..</text>
</g>
<g>
<title>java.util.ArrayList (23 samples, 0.02%)</title><rect x="370.1" y="243.0" width="0.2" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="373.1" y="254.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (24 samples, 0.02%)</title><rect x="370.3" y="243.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="373.3" y="254.0"></text>
</g>
<g>
<title>java.lang.Object[] (24 samples, 0.02%)</title><rect x="370.3" y="227.0" width="0.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="373.3" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/nik27090/HttpHelper.proxy (28,462 samples, 27.55%)</title><rect x="370.6" y="243.0" width="325.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="373.6" y="254.0">ru/mail/polis/service/nik27090/HttpHelper.pr..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (140 samples, 0.14%)</title><rect x="370.6" y="227.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="373.6" y="238.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1426329391.invoke (140 samples, 0.14%)</title><rect x="370.6" y="211.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="373.6" y="222.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (140 samples, 0.14%)</title><rect x="370.6" y="195.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="373.6" y="206.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (41 samples, 0.04%)</title><rect x="370.6" y="179.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="373.6" y="190.0"></text>
</g>
<g>
<title>java.lang.String (41 samples, 0.04%)</title><rect x="370.6" y="163.0" width="0.5" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="373.6" y="174.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (99 samples, 0.10%)</title><rect x="371.1" y="179.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="374.1" y="190.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (99 samples, 0.10%)</title><rect x="371.1" y="163.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="374.1" y="174.0"></text>
</g>
<g>
<title>byte[] (99 samples, 0.10%)</title><rect x="371.1" y="147.0" width="1.1" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="374.1" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (28,322 samples, 27.41%)</title><rect x="372.2" y="227.0" width="323.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="375.2" y="238.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (28,322 samples, 27.41%)</title><rect x="372.2" y="211.0" width="323.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="375.2" y="222.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (114 samples, 0.11%)</title><rect x="372.2" y="195.0" width="1.3" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="375.2" y="206.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (26,078 samples, 25.24%)</title><rect x="373.5" y="195.0" width="297.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="376.5" y="206.0">one/nio/http/HttpClient$ResponseReader.&lt;..</text>
</g>
<g>
<title>byte[] (13,288 samples, 12.86%)</title><rect x="373.5" y="179.0" width="151.8" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="376.5" y="190.0">byte[]</text>
</g>
<g>
<title>byte[] (12,790 samples, 12.38%)</title><rect x="525.3" y="179.0" width="146.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="528.3" y="190.0">byte[]</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (1,704 samples, 1.65%)</title><rect x="671.3" y="195.0" width="19.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="674.3" y="206.0"></text>
</g>
<g>
<title>byte[] (25 samples, 0.02%)</title><rect x="671.3" y="179.0" width="0.3" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="674.3" y="190.0"></text>
</g>
<g>
<title>java/lang/String.substring (86 samples, 0.08%)</title><rect x="671.6" y="179.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="674.6" y="190.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (86 samples, 0.08%)</title><rect x="671.6" y="163.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="674.6" y="174.0"></text>
</g>
<g>
<title>java.lang.String (33 samples, 0.03%)</title><rect x="671.6" y="147.0" width="0.4" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="674.6" y="158.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (53 samples, 0.05%)</title><rect x="672.0" y="147.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="675.0" y="158.0"></text>
</g>
<g>
<title>byte[] (53 samples, 0.05%)</title><rect x="672.0" y="131.0" width="0.6" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="675.0" y="142.0"></text>
</g>
<g>
<title>one.nio.http.Response (46 samples, 0.04%)</title><rect x="672.6" y="179.0" width="0.5" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="675.6" y="190.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (1,429 samples, 1.38%)</title><rect x="673.1" y="179.0" width="16.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="676.1" y="190.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1,429 samples, 1.38%)</title><rect x="673.1" y="163.0" width="16.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="676.1" y="174.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1,429 samples, 1.38%)</title><rect x="673.1" y="147.0" width="16.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="676.1" y="158.0"></text>
</g>
<g>
<title>char[] (1,075 samples, 1.04%)</title><rect x="673.1" y="131.0" width="12.3" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="676.1" y="142.0"></text>
</g>
<g>
<title>java.lang.String (159 samples, 0.15%)</title><rect x="685.4" y="131.0" width="1.8" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="688.4" y="142.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (195 samples, 0.19%)</title><rect x="687.2" y="131.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="690.2" y="142.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (195 samples, 0.19%)</title><rect x="687.2" y="115.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="690.2" y="126.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (195 samples, 0.19%)</title><rect x="687.2" y="99.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="690.2" y="110.0"></text>
</g>
<g>
<title>byte[] (195 samples, 0.19%)</title><rect x="687.2" y="83.0" width="2.2" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="690.2" y="94.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (44 samples, 0.04%)</title><rect x="689.4" y="179.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="692.4" y="190.0"></text>
</g>
<g>
<title>java.lang.String[] (44 samples, 0.04%)</title><rect x="689.4" y="163.0" width="0.5" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="692.4" y="174.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (74 samples, 0.07%)</title><rect x="689.9" y="179.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="692.9" y="190.0"></text>
</g>
<g>
<title>java/lang/String.substring (74 samples, 0.07%)</title><rect x="689.9" y="163.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="692.9" y="174.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (74 samples, 0.07%)</title><rect x="689.9" y="147.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="692.9" y="158.0"></text>
</g>
<g>
<title>java.lang.String (29 samples, 0.03%)</title><rect x="689.9" y="131.0" width="0.4" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="692.9" y="142.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (45 samples, 0.04%)</title><rect x="690.3" y="131.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="693.3" y="142.0"></text>
</g>
<g>
<title>byte[] (45 samples, 0.04%)</title><rect x="690.3" y="115.0" width="0.5" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="693.3" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (293 samples, 0.28%)</title><rect x="690.8" y="195.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="693.8" y="206.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (293 samples, 0.28%)</title><rect x="690.8" y="179.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="693.8" y="190.0"></text>
</g>
<g>
<title>byte[] (293 samples, 0.28%)</title><rect x="690.8" y="163.0" width="3.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="693.8" y="174.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (88 samples, 0.09%)</title><rect x="694.1" y="195.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="697.1" y="206.0"></text>
</g>
<g>
<title>java/lang/String.substring (88 samples, 0.09%)</title><rect x="694.1" y="179.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="697.1" y="190.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (88 samples, 0.09%)</title><rect x="694.1" y="163.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="697.1" y="174.0"></text>
</g>
<g>
<title>java.lang.String (36 samples, 0.03%)</title><rect x="694.1" y="147.0" width="0.4" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="697.1" y="158.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (52 samples, 0.05%)</title><rect x="694.5" y="147.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="697.5" y="158.0"></text>
</g>
<g>
<title>byte[] (52 samples, 0.05%)</title><rect x="694.5" y="131.0" width="0.6" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="697.5" y="142.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (45 samples, 0.04%)</title><rect x="695.1" y="195.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="698.1" y="206.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (45 samples, 0.04%)</title><rect x="695.1" y="179.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="698.1" y="190.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (45 samples, 0.04%)</title><rect x="695.1" y="163.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="698.1" y="174.0"></text>
</g>
<g>
<title>java.util.LinkedList$Node (45 samples, 0.04%)</title><rect x="695.1" y="147.0" width="0.5" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="698.1" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/service/nik27090/RendezvousTopology.isProxyReq (3,547 samples, 3.43%)</title><rect x="695.6" y="259.0" width="40.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="698.6" y="270.0">ru/..</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3,547 samples, 3.43%)</title><rect x="695.6" y="243.0" width="40.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="698.6" y="254.0">one..</text>
</g>
<g>
<title>java/lang/String.substring (3,547 samples, 3.43%)</title><rect x="695.6" y="227.0" width="40.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="698.6" y="238.0">jav..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3,547 samples, 3.43%)</title><rect x="695.6" y="211.0" width="40.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="698.6" y="222.0">jav..</text>
</g>
<g>
<title>java.lang.String (1,370 samples, 1.33%)</title><rect x="695.6" y="195.0" width="15.7" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="698.6" y="206.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2,177 samples, 2.11%)</title><rect x="711.3" y="195.0" width="24.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="714.3" y="206.0">j..</text>
</g>
<g>
<title>byte[] (2,177 samples, 2.11%)</title><rect x="711.3" y="179.0" width="24.8" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="714.3" y="190.0">b..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (39,743 samples, 38.46%)</title><rect x="736.1" y="355.0" width="453.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="739.1" y="366.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (1,307 samples, 1.26%)</title><rect x="736.1" y="339.0" width="15.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="739.1" y="350.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (1,307 samples, 1.26%)</title><rect x="736.1" y="323.0" width="15.0" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="739.1" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (38,436 samples, 37.20%)</title><rect x="751.1" y="339.0" width="438.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="754.1" y="350.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (38,436 samples, 37.20%)</title><rect x="751.1" y="323.0" width="438.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="754.1" y="334.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (38,436 samples, 37.20%)</title><rect x="751.1" y="307.0" width="438.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="754.1" y="318.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (6,185 samples, 5.99%)</title><rect x="751.1" y="291.0" width="70.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="754.1" y="302.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (6,185 samples, 5.99%)</title><rect x="751.1" y="275.0" width="70.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="754.1" y="286.0">one/nio/..</text>
</g>
<g>
<title>RequestHandler1_requestHandler.handleRequest (3,654 samples, 3.54%)</title><rect x="751.1" y="259.0" width="41.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="754.1" y="270.0">Req..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (2,121 samples, 2.05%)</title><rect x="751.1" y="243.0" width="24.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="754.1" y="254.0">o..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2,121 samples, 2.05%)</title><rect x="751.1" y="227.0" width="24.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="754.1" y="238.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (2,121 samples, 2.05%)</title><rect x="751.1" y="211.0" width="24.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="754.1" y="222.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2,121 samples, 2.05%)</title><rect x="751.1" y="195.0" width="24.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="754.1" y="206.0">j..</text>
</g>
<g>
<title>java.lang.String (1,084 samples, 1.05%)</title><rect x="751.1" y="179.0" width="12.3" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="754.1" y="190.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1,037 samples, 1.00%)</title><rect x="763.4" y="179.0" width="11.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="766.4" y="190.0"></text>
</g>
<g>
<title>byte[] (1,037 samples, 1.00%)</title><rect x="763.4" y="163.0" width="11.9" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="766.4" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/nik27090/ServiceImpl.requestHandler (1,533 samples, 1.48%)</title><rect x="775.3" y="243.0" width="17.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="778.3" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/468134893.linkToTargetMethod (1,496 samples, 1.45%)</title><rect x="775.3" y="227.0" width="17.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="778.3" y="238.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1,496 samples, 1.45%)</title><rect x="775.3" y="211.0" width="17.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="778.3" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/nik27090/ServiceImpl$$Lambda$73/534297806.get$Lambda (1,496 samples, 1.45%)</title><rect x="775.3" y="195.0" width="17.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="778.3" y="206.0"></text>
</g>
<g>
<title>ru.mail.polis.service.nik27090.ServiceImpl$$Lambda$73 (1,496 samples, 1.45%)</title><rect x="775.3" y="179.0" width="17.1" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="778.3" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (37 samples, 0.04%)</title><rect x="792.4" y="227.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="795.4" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (37 samples, 0.04%)</title><rect x="792.4" y="211.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="795.4" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (37 samples, 0.04%)</title><rect x="792.4" y="195.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="795.4" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (37 samples, 0.04%)</title><rect x="792.4" y="179.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="795.4" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (37 samples, 0.04%)</title><rect x="792.4" y="163.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="795.4" y="174.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (37 samples, 0.04%)</title><rect x="792.4" y="147.0" width="0.4" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="795.4" y="158.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (2,531 samples, 2.45%)</title><rect x="792.8" y="259.0" width="28.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="795.8" y="270.0">on..</text>
</g>
<g>
<title>java/lang/String.substring (2,531 samples, 2.45%)</title><rect x="792.8" y="243.0" width="28.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="795.8" y="254.0">ja..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2,531 samples, 2.45%)</title><rect x="792.8" y="227.0" width="28.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="795.8" y="238.0">ja..</text>
</g>
<g>
<title>java.lang.String (1,173 samples, 1.14%)</title><rect x="792.8" y="211.0" width="13.4" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="795.8" y="222.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1,358 samples, 1.31%)</title><rect x="806.2" y="211.0" width="15.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="809.2" y="222.0"></text>
</g>
<g>
<title>byte[] (1,358 samples, 1.31%)</title><rect x="806.2" y="195.0" width="15.5" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="809.2" y="206.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (11,911 samples, 11.53%)</title><rect x="821.7" y="291.0" width="136.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="824.7" y="302.0">one/nio/http/Http..</text>
</g>
<g>
<title>one.nio.http.Request (1,925 samples, 1.86%)</title><rect x="821.7" y="275.0" width="22.0" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="824.7" y="286.0">o..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3,877 samples, 3.75%)</title><rect x="843.7" y="275.0" width="44.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="846.7" y="286.0">one/..</text>
</g>
<g>
<title>java.lang.String[] (3,877 samples, 3.75%)</title><rect x="843.7" y="259.0" width="44.3" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="846.7" y="270.0">java..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (6,109 samples, 5.91%)</title><rect x="888.0" y="275.0" width="69.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="891.0" y="286.0">one/nio..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (6,109 samples, 5.91%)</title><rect x="888.0" y="259.0" width="69.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="891.0" y="270.0">one/nio..</text>
</g>
<g>
<title>char[] (3,376 samples, 3.27%)</title><rect x="888.0" y="243.0" width="38.5" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="891.0" y="254.0">cha..</text>
</g>
<g>
<title>java.lang.String (1,041 samples, 1.01%)</title><rect x="926.5" y="243.0" width="11.9" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="929.5" y="254.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,692 samples, 1.64%)</title><rect x="938.4" y="243.0" width="19.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="941.4" y="254.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,692 samples, 1.64%)</title><rect x="938.4" y="227.0" width="19.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="941.4" y="238.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1,692 samples, 1.64%)</title><rect x="938.4" y="211.0" width="19.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="941.4" y="222.0"></text>
</g>
<g>
<title>byte[] (1,692 samples, 1.64%)</title><rect x="938.4" y="195.0" width="19.3" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="941.4" y="206.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (1,505 samples, 1.46%)</title><rect x="957.7" y="291.0" width="17.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="960.7" y="302.0"></text>
</g>
<g>
<title>byte[] (1,505 samples, 1.46%)</title><rect x="957.7" y="275.0" width="17.2" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="960.7" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2,096 samples, 2.03%)</title><rect x="974.9" y="291.0" width="23.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="977.9" y="302.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (2,096 samples, 2.03%)</title><rect x="974.9" y="275.0" width="23.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="977.9" y="286.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2,096 samples, 2.03%)</title><rect x="974.9" y="259.0" width="23.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="977.9" y="270.0">j..</text>
</g>
<g>
<title>java.lang.String (1,012 samples, 0.98%)</title><rect x="974.9" y="243.0" width="11.6" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="977.9" y="254.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1,084 samples, 1.05%)</title><rect x="986.5" y="243.0" width="12.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="989.5" y="254.0"></text>
</g>
<g>
<title>byte[] (1,084 samples, 1.05%)</title><rect x="986.5" y="227.0" width="12.3" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="989.5" y="238.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (16,739 samples, 16.20%)</title><rect x="998.8" y="291.0" width="191.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1001.8" y="302.0">one/nio/util/Utf8.read</text>
</g>
<g>
<title>one/nio/util/Utf8.read (16,739 samples, 16.20%)</title><rect x="998.8" y="275.0" width="191.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1001.8" y="286.0">one/nio/util/Utf8.read</text>
</g>
<g>
<title>char[] (8,279 samples, 8.01%)</title><rect x="998.8" y="259.0" width="94.6" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="1001.8" y="270.0">char[]</text>
</g>
<g>
<title>java.lang.String (3,069 samples, 2.97%)</title><rect x="1093.4" y="259.0" width="35.0" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="1096.4" y="270.0">jav..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (5,391 samples, 5.22%)</title><rect x="1128.4" y="259.0" width="61.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1131.4" y="270.0">java/l..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (5,391 samples, 5.22%)</title><rect x="1128.4" y="243.0" width="61.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1131.4" y="254.0">java/l..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (5,391 samples, 5.22%)</title><rect x="1128.4" y="227.0" width="61.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1131.4" y="238.0">java/l..</text>
</g>
<g>
<title>byte[] (5,391 samples, 5.22%)</title><rect x="1128.4" y="211.0" width="61.6" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="1131.4" y="222.0">byte[]</text>
</g>
</g>
</svg>
