<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="341"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="341"> </text>
<g id="frames">
<g>
<title>all (21,521 samples, 100.00%)</title><rect x="10.0" y="307.0" width="1180.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="318.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (13,623 samples, 63.30%)</title><rect x="10.0" y="291.0" width="747.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="13.0" y="302.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (13,623 samples, 63.30%)</title><rect x="10.0" y="275.0" width="747.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="13.0" y="286.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (13,623 samples, 63.30%)</title><rect x="10.0" y="259.0" width="747.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.0" y="270.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (585 samples, 2.72%)</title><rect x="10.0" y="243.0" width="32.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="13.0" y="254.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (585 samples, 2.72%)</title><rect x="10.0" y="227.0" width="32.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.0" y="238.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (582 samples, 2.70%)</title><rect x="10.0" y="211.0" width="31.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="222.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (582 samples, 2.70%)</title><rect x="10.0" y="195.0" width="31.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.0" y="206.0">ja..</text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (582 samples, 2.70%)</title><rect x="10.0" y="179.0" width="31.9" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="13.0" y="190.0">ja..</text>
</g>
<g>
<title>ru/mail/polis/service/nik27090/ServiceImpl$$Lambda$74/2097645333.run (13,038 samples, 60.58%)</title><rect x="42.1" y="243.0" width="714.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="45.1" y="254.0">ru/mail/polis/service/nik27090/ServiceImpl$$Lambda$74/2097645333.run</text>
</g>
<g>
<title>ru/mail/polis/service/nik27090/ServiceImpl.lambda$getEntity$1 (13,038 samples, 60.58%)</title><rect x="42.1" y="227.0" width="714.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="45.1" y="238.0">ru/mail/polis/service/nik27090/ServiceImpl.lambda$getEntity$1</text>
</g>
<g>
<title>ru/mail/polis/service/nik27090/ServiceImpl.putEntityExecutor (13,038 samples, 60.58%)</title><rect x="42.1" y="211.0" width="714.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="45.1" y="222.0">ru/mail/polis/service/nik27090/ServiceImpl.putEntityExecutor</text>
</g>
<g>
<title>java/lang/String.getBytes (466 samples, 2.17%)</title><rect x="42.1" y="195.0" width="25.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="45.1" y="206.0">j..</text>
</g>
<g>
<title>java/lang/StringCoding.encode (466 samples, 2.17%)</title><rect x="42.1" y="179.0" width="25.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="45.1" y="190.0">j..</text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (466 samples, 2.17%)</title><rect x="42.1" y="163.0" width="25.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="45.1" y="174.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (466 samples, 2.17%)</title><rect x="42.1" y="147.0" width="25.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="45.1" y="158.0">j..</text>
</g>
<g>
<title>byte[] (466 samples, 2.17%)</title><rect x="42.1" y="131.0" width="25.5" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="45.1" y="142.0">b..</text>
</g>
<g>
<title>one.nio.http.Response (228 samples, 1.06%)</title><rect x="67.6" y="195.0" width="12.5" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="70.6" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1,200 samples, 5.58%)</title><rect x="80.1" y="195.0" width="65.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="83.1" y="206.0">one/nio..</text>
</g>
<g>
<title>byte[] (533 samples, 2.48%)</title><rect x="80.1" y="179.0" width="29.3" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="83.1" y="190.0">by..</text>
</g>
<g>
<title>java.lang.String[] (361 samples, 1.68%)</title><rect x="109.4" y="179.0" width="19.7" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="112.4" y="190.0"></text>
</g>
<g>
<title>java.lang.String (306 samples, 1.42%)</title><rect x="129.1" y="179.0" width="16.8" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="132.1" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/nik27090/DAOImpl.upsert (1,114 samples, 5.18%)</title><rect x="145.9" y="195.0" width="61.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="148.9" y="206.0">ru/mai..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (6 samples, 0.03%)</title><rect x="145.9" y="179.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="148.9" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (6 samples, 0.03%)</title><rect x="145.9" y="163.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="148.9" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (6 samples, 0.03%)</title><rect x="145.9" y="147.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="148.9" y="158.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.02%)</title><rect x="145.9" y="131.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="148.9" y="142.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (5 samples, 0.02%)</title><rect x="145.9" y="115.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="148.9" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/nik27090/MemTable.upsert (1,108 samples, 5.15%)</title><rect x="146.3" y="179.0" width="60.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="149.3" y="190.0">ru/mai..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (874 samples, 4.06%)</title><rect x="146.3" y="163.0" width="47.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="149.3" y="174.0">java..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (874 samples, 4.06%)</title><rect x="146.3" y="147.0" width="47.9" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="149.3" y="158.0">java..</text>
</g>
<g>
<title>ru.mail.polis.dao.nik27090.Value (234 samples, 1.09%)</title><rect x="194.2" y="163.0" width="12.8" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="197.2" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/nik27090/RendezvousTopology.getRightNodeForKey (3,551 samples, 16.50%)</title><rect x="207.0" y="195.0" width="194.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="210.0" y="206.0">ru/mail/polis/service/nik..</text>
</g>
<g>
<title>ru/mail/polis/service/nik27090/RendezvousTopology.getRightNodeForKey (3,551 samples, 16.50%)</title><rect x="207.0" y="179.0" width="194.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="210.0" y="190.0">ru/mail/polis/service/nik..</text>
</g>
<g>
<title>java/lang/String.getBytes (1,329 samples, 6.18%)</title><rect x="207.0" y="163.0" width="72.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="210.0" y="174.0">java/lan..</text>
</g>
<g>
<title>java/lang/StringCoding.encode (1,329 samples, 6.18%)</title><rect x="207.0" y="147.0" width="72.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="210.0" y="158.0">java/lan..</text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1,329 samples, 6.18%)</title><rect x="207.0" y="131.0" width="72.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="210.0" y="142.0">java/lan..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (1,329 samples, 6.18%)</title><rect x="207.0" y="115.0" width="72.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="210.0" y="126.0">java/uti..</text>
</g>
<g>
<title>byte[] (1,329 samples, 6.18%)</title><rect x="207.0" y="99.0" width="72.9" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="210.0" y="110.0">byte[]</text>
</g>
<g>
<title>ru/mail/polis/service/nik27090/RendezvousTopology.getBytes (2,222 samples, 10.32%)</title><rect x="279.9" y="163.0" width="121.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="282.9" y="174.0">ru/mail/polis/s..</text>
</g>
<g>
<title>byte[] (771 samples, 3.58%)</title><rect x="279.9" y="147.0" width="42.2" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="282.9" y="158.0">byte[]</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1,451 samples, 6.74%)</title><rect x="322.1" y="147.0" width="79.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="325.1" y="158.0">java/nio/..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,451 samples, 6.74%)</title><rect x="322.1" y="131.0" width="79.6" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="325.1" y="142.0">java.nio...</text>
</g>
<g>
<title>ru/mail/polis/service/nik27090/ServiceImpl.proxy (4,894 samples, 22.74%)</title><rect x="401.7" y="195.0" width="268.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="404.7" y="206.0">ru/mail/polis/service/nik27090/Servi..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (45 samples, 0.21%)</title><rect x="401.7" y="179.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="404.7" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1860250540.invoke (45 samples, 0.21%)</title><rect x="401.7" y="163.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="404.7" y="174.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (45 samples, 0.21%)</title><rect x="401.7" y="147.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="404.7" y="158.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (16 samples, 0.07%)</title><rect x="401.7" y="131.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="404.7" y="142.0"></text>
</g>
<g>
<title>java.lang.String (16 samples, 0.07%)</title><rect x="401.7" y="115.0" width="0.9" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="404.7" y="126.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (29 samples, 0.13%)</title><rect x="402.6" y="131.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="405.6" y="142.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (29 samples, 0.13%)</title><rect x="402.6" y="115.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="405.6" y="126.0"></text>
</g>
<g>
<title>byte[] (29 samples, 0.13%)</title><rect x="402.6" y="99.0" width="1.6" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="405.6" y="110.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (4,849 samples, 22.53%)</title><rect x="404.2" y="179.0" width="265.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="407.2" y="190.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (4,849 samples, 22.53%)</title><rect x="404.2" y="163.0" width="265.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="407.2" y="174.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (15 samples, 0.07%)</title><rect x="404.2" y="147.0" width="0.8" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="407.2" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (4,372 samples, 20.32%)</title><rect x="405.0" y="147.0" width="239.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="408.0" y="158.0">one/nio/http/HttpClient$Response..</text>
</g>
<g>
<title>byte[] (2,422 samples, 11.25%)</title><rect x="405.0" y="131.0" width="132.8" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="408.0" y="142.0">byte[]</text>
</g>
<g>
<title>byte[] (1,950 samples, 9.06%)</title><rect x="537.8" y="131.0" width="106.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="540.8" y="142.0">byte[]</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (361 samples, 1.68%)</title><rect x="644.7" y="147.0" width="19.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="647.7" y="158.0"></text>
</g>
<g>
<title>java/lang/String.substring (25 samples, 0.12%)</title><rect x="644.9" y="131.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="647.9" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (25 samples, 0.12%)</title><rect x="644.9" y="115.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="647.9" y="126.0"></text>
</g>
<g>
<title>java.lang.String (10 samples, 0.05%)</title><rect x="644.9" y="99.0" width="0.5" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="647.9" y="110.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (15 samples, 0.07%)</title><rect x="645.4" y="99.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="648.4" y="110.0"></text>
</g>
<g>
<title>byte[] (15 samples, 0.07%)</title><rect x="645.4" y="83.0" width="0.8" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="648.4" y="94.0"></text>
</g>
<g>
<title>one.nio.http.Response (6 samples, 0.03%)</title><rect x="646.2" y="131.0" width="0.4" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="649.2" y="142.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (297 samples, 1.38%)</title><rect x="646.6" y="131.0" width="16.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="649.6" y="142.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (297 samples, 1.38%)</title><rect x="646.6" y="115.0" width="16.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="649.6" y="126.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (297 samples, 1.38%)</title><rect x="646.6" y="99.0" width="16.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="649.6" y="110.0"></text>
</g>
<g>
<title>char[] (202 samples, 0.94%)</title><rect x="646.6" y="83.0" width="11.1" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="649.6" y="94.0"></text>
</g>
<g>
<title>java.lang.String (46 samples, 0.21%)</title><rect x="657.7" y="83.0" width="2.5" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="660.7" y="94.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (49 samples, 0.23%)</title><rect x="660.2" y="83.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="663.2" y="94.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (49 samples, 0.23%)</title><rect x="660.2" y="67.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="663.2" y="78.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (49 samples, 0.23%)</title><rect x="660.2" y="51.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="663.2" y="62.0"></text>
</g>
<g>
<title>byte[] (49 samples, 0.23%)</title><rect x="660.2" y="35.0" width="2.7" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="663.2" y="46.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (11 samples, 0.05%)</title><rect x="662.9" y="131.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="665.9" y="142.0"></text>
</g>
<g>
<title>java.lang.String[] (11 samples, 0.05%)</title><rect x="662.9" y="115.0" width="0.6" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="665.9" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (19 samples, 0.09%)</title><rect x="663.5" y="131.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="666.5" y="142.0"></text>
</g>
<g>
<title>java/lang/String.substring (19 samples, 0.09%)</title><rect x="663.5" y="115.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="666.5" y="126.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (19 samples, 0.09%)</title><rect x="663.5" y="99.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="666.5" y="110.0"></text>
</g>
<g>
<title>java.lang.String (10 samples, 0.05%)</title><rect x="663.5" y="83.0" width="0.5" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="666.5" y="94.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (9 samples, 0.04%)</title><rect x="664.0" y="83.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="667.0" y="94.0"></text>
</g>
<g>
<title>byte[] (9 samples, 0.04%)</title><rect x="664.0" y="67.0" width="0.5" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="667.0" y="78.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (70 samples, 0.33%)</title><rect x="664.5" y="147.0" width="3.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="667.5" y="158.0"></text>
</g>
<g>
<title>one.nio.util.ByteArrayBuilder (6 samples, 0.03%)</title><rect x="664.5" y="131.0" width="0.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="667.5" y="142.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (64 samples, 0.30%)</title><rect x="664.8" y="131.0" width="3.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="667.8" y="142.0"></text>
</g>
<g>
<title>byte[] (64 samples, 0.30%)</title><rect x="664.8" y="115.0" width="3.5" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="667.8" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (21 samples, 0.10%)</title><rect x="668.3" y="147.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="671.3" y="158.0"></text>
</g>
<g>
<title>java/lang/String.substring (21 samples, 0.10%)</title><rect x="668.3" y="131.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="671.3" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (21 samples, 0.10%)</title><rect x="668.3" y="115.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="671.3" y="126.0"></text>
</g>
<g>
<title>java.lang.String (9 samples, 0.04%)</title><rect x="668.3" y="99.0" width="0.5" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="671.3" y="110.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (12 samples, 0.06%)</title><rect x="668.8" y="99.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="671.8" y="110.0"></text>
</g>
<g>
<title>byte[] (12 samples, 0.06%)</title><rect x="668.8" y="83.0" width="0.7" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="671.8" y="94.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (10 samples, 0.05%)</title><rect x="669.5" y="147.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="672.5" y="158.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (10 samples, 0.05%)</title><rect x="669.5" y="131.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="672.5" y="142.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (10 samples, 0.05%)</title><rect x="669.5" y="115.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="672.5" y="126.0"></text>
</g>
<g>
<title>java.util.LinkedList$Node (10 samples, 0.05%)</title><rect x="669.5" y="99.0" width="0.5" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="672.5" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/service/nik27090/ServiceImpl.sendResponse (1,585 samples, 7.36%)</title><rect x="670.0" y="195.0" width="87.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="673.0" y="206.0">ru/mail/po..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,585 samples, 7.36%)</title><rect x="670.0" y="179.0" width="87.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="673.0" y="190.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1,585 samples, 7.36%)</title><rect x="670.0" y="163.0" width="87.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="673.0" y="174.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1,099 samples, 5.11%)</title><rect x="670.0" y="147.0" width="60.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="673.0" y="158.0">one/ni..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1,099 samples, 5.11%)</title><rect x="670.0" y="131.0" width="60.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="673.0" y="142.0">one/ni..</text>
</g>
<g>
<title>byte[] (827 samples, 3.84%)</title><rect x="670.0" y="115.0" width="45.4" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="673.0" y="126.0">byte[]</text>
</g>
<g>
<title>byte[] (272 samples, 1.26%)</title><rect x="715.4" y="115.0" width="14.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="718.4" y="126.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (486 samples, 2.26%)</title><rect x="730.3" y="147.0" width="26.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="733.3" y="158.0">o..</text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (486 samples, 2.26%)</title><rect x="730.3" y="131.0" width="26.7" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="733.3" y="142.0">o..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (7,898 samples, 36.70%)</title><rect x="757.0" y="291.0" width="433.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="760.0" y="302.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (272 samples, 1.26%)</title><rect x="757.0" y="275.0" width="14.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="760.0" y="286.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (272 samples, 1.26%)</title><rect x="757.0" y="259.0" width="14.9" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="760.0" y="270.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (7,626 samples, 35.44%)</title><rect x="771.9" y="275.0" width="418.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="774.9" y="286.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (7,626 samples, 35.44%)</title><rect x="771.9" y="259.0" width="418.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="774.9" y="270.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (7,626 samples, 35.44%)</title><rect x="771.9" y="243.0" width="418.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="774.9" y="254.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,297 samples, 6.03%)</title><rect x="771.9" y="227.0" width="71.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="774.9" y="238.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,297 samples, 6.03%)</title><rect x="771.9" y="211.0" width="71.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="774.9" y="222.0">one/nio/..</text>
</g>
<g>
<title>RequestHandler1_getEntity.handleRequest (789 samples, 3.67%)</title><rect x="771.9" y="195.0" width="43.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="774.9" y="206.0">Requ..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (445 samples, 2.07%)</title><rect x="771.9" y="179.0" width="24.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="774.9" y="190.0">o..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (445 samples, 2.07%)</title><rect x="771.9" y="163.0" width="24.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="774.9" y="174.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (445 samples, 2.07%)</title><rect x="771.9" y="147.0" width="24.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="774.9" y="158.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (445 samples, 2.07%)</title><rect x="771.9" y="131.0" width="24.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="774.9" y="142.0">j..</text>
</g>
<g>
<title>java.lang.String (195 samples, 0.91%)</title><rect x="771.9" y="115.0" width="10.7" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="774.9" y="126.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (250 samples, 1.16%)</title><rect x="782.6" y="115.0" width="13.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="785.6" y="126.0"></text>
</g>
<g>
<title>byte[] (250 samples, 1.16%)</title><rect x="782.6" y="99.0" width="13.7" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="785.6" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/service/nik27090/ServiceImpl.getEntity (344 samples, 1.60%)</title><rect x="796.3" y="179.0" width="18.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="799.3" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (339 samples, 1.58%)</title><rect x="796.3" y="163.0" width="18.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="799.3" y="174.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (339 samples, 1.58%)</title><rect x="796.3" y="147.0" width="18.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="799.3" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/service/nik27090/ServiceImpl$$Lambda$74/2097645333.get$Lambda (339 samples, 1.58%)</title><rect x="796.3" y="131.0" width="18.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="799.3" y="142.0"></text>
</g>
<g>
<title>ru.mail.polis.service.nik27090.ServiceImpl$$Lambda$74 (339 samples, 1.58%)</title><rect x="796.3" y="115.0" width="18.6" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="799.3" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (5 samples, 0.02%)</title><rect x="814.9" y="163.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="817.9" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (5 samples, 0.02%)</title><rect x="814.9" y="147.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="817.9" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.02%)</title><rect x="814.9" y="131.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="817.9" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.02%)</title><rect x="814.9" y="115.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="817.9" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (5 samples, 0.02%)</title><rect x="814.9" y="99.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="817.9" y="110.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (5 samples, 0.02%)</title><rect x="814.9" y="83.0" width="0.2" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="817.9" y="94.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (508 samples, 2.36%)</title><rect x="815.1" y="195.0" width="27.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="818.1" y="206.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (508 samples, 2.36%)</title><rect x="815.1" y="179.0" width="27.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="818.1" y="190.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (508 samples, 2.36%)</title><rect x="815.1" y="163.0" width="27.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="818.1" y="174.0">j..</text>
</g>
<g>
<title>java.lang.String (180 samples, 0.84%)</title><rect x="815.1" y="147.0" width="9.9" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="818.1" y="158.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (328 samples, 1.52%)</title><rect x="825.0" y="147.0" width="18.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="828.0" y="158.0"></text>
</g>
<g>
<title>byte[] (328 samples, 1.52%)</title><rect x="825.0" y="131.0" width="18.0" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="828.0" y="142.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (2,506 samples, 11.64%)</title><rect x="843.0" y="227.0" width="137.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="846.0" y="238.0">one/nio/http/Http..</text>
</g>
<g>
<title>one.nio.http.Request (386 samples, 1.79%)</title><rect x="843.0" y="211.0" width="21.1" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="846.0" y="222.0">o..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (847 samples, 3.94%)</title><rect x="864.1" y="211.0" width="46.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="867.1" y="222.0">one/..</text>
</g>
<g>
<title>java.lang.String[] (847 samples, 3.94%)</title><rect x="864.1" y="195.0" width="46.5" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="867.1" y="206.0">java..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (1,273 samples, 5.92%)</title><rect x="910.6" y="211.0" width="69.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="913.6" y="222.0">one/nio..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (1,273 samples, 5.92%)</title><rect x="910.6" y="195.0" width="69.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="913.6" y="206.0">one/nio..</text>
</g>
<g>
<title>char[] (696 samples, 3.23%)</title><rect x="910.6" y="179.0" width="38.1" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="913.6" y="190.0">cha..</text>
</g>
<g>
<title>java.lang.String (218 samples, 1.01%)</title><rect x="948.7" y="179.0" width="12.0" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="951.7" y="190.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (359 samples, 1.67%)</title><rect x="960.7" y="179.0" width="19.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="963.7" y="190.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (359 samples, 1.67%)</title><rect x="960.7" y="163.0" width="19.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="963.7" y="174.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (359 samples, 1.67%)</title><rect x="960.7" y="147.0" width="19.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="963.7" y="158.0"></text>
</g>
<g>
<title>byte[] (359 samples, 1.67%)</title><rect x="960.7" y="131.0" width="19.7" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="963.7" y="142.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (329 samples, 1.53%)</title><rect x="980.4" y="227.0" width="18.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="983.4" y="238.0"></text>
</g>
<g>
<title>byte[] (329 samples, 1.53%)</title><rect x="980.4" y="211.0" width="18.0" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="983.4" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (436 samples, 2.03%)</title><rect x="998.4" y="227.0" width="23.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1001.4" y="238.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (436 samples, 2.03%)</title><rect x="998.4" y="211.0" width="23.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1001.4" y="222.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (436 samples, 2.03%)</title><rect x="998.4" y="195.0" width="23.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1001.4" y="206.0">j..</text>
</g>
<g>
<title>java.lang.String (176 samples, 0.82%)</title><rect x="998.4" y="179.0" width="9.7" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="1001.4" y="190.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (260 samples, 1.21%)</title><rect x="1008.1" y="179.0" width="14.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1011.1" y="190.0"></text>
</g>
<g>
<title>byte[] (260 samples, 1.21%)</title><rect x="1008.1" y="163.0" width="14.2" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="1011.1" y="174.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3,058 samples, 14.21%)</title><rect x="1022.3" y="227.0" width="167.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1025.3" y="238.0">one/nio/util/Utf8.read</text>
</g>
<g>
<title>one/nio/util/Utf8.read (3,058 samples, 14.21%)</title><rect x="1022.3" y="211.0" width="167.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1025.3" y="222.0">one/nio/util/Utf8.read</text>
</g>
<g>
<title>char[] (1,535 samples, 7.13%)</title><rect x="1022.3" y="195.0" width="84.2" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="1025.3" y="206.0">char[]</text>
</g>
<g>
<title>char[] (11 samples, 0.05%)</title><rect x="1106.5" y="195.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1109.5" y="206.0"></text>
</g>
<g>
<title>java.lang.String (546 samples, 2.54%)</title><rect x="1107.1" y="195.0" width="29.9" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="1110.1" y="206.0">ja..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (966 samples, 4.49%)</title><rect x="1137.0" y="195.0" width="53.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1140.0" y="206.0">java/..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (966 samples, 4.49%)</title><rect x="1137.0" y="179.0" width="53.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1140.0" y="190.0">java/..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (966 samples, 4.49%)</title><rect x="1137.0" y="163.0" width="53.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1140.0" y="174.0">java/..</text>
</g>
<g>
<title>byte[] (966 samples, 4.49%)</title><rect x="1137.0" y="147.0" width="53.0" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="1140.0" y="158.0">byte[]</text>
</g>
</g>
</svg>
